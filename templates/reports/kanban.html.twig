{% extends 'index.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css" rel="stylesheet">
{% endblock %}
{% block centent %}
<div class="container-fluid p-6 bg-gray-50 dark:bg-gray-900">
    <div class="flex gap-6 overflow-x-auto p-2">
        {% set columns = {
            'pending': {'title': 'Pending', 'reports': pendingReports},
            'in_progress': {'title': 'In Progress', 'reports': inProgressReports},
            'resolved': {'title': 'Resolved', 'reports': resolvedReports},
            'closed': {'title': 'Closed', 'reports': closedReports}
        } %}

        {% for key, column in columns %}
            <div class="bg-transparent rounded-lg min-w-80 max-w-80 flex-shrink-0 shadow">
                <!-- Column Header -->
                <div class="p-4 font-medium text-lg flex justify-between items-center border-gray-100 dark:border-gray-700">
                    <span class="text-gray-800 dark:text-white">{{ column.title }}</span>
                    <span class="bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full px-2 py-1 text-xs">{{ column.reports|length }}</span>
                </div>
                
                <div class="kanban-items p-4 min-h-80" data-status="{{ key }}">
                    {% for report in column.reports %}
                        <div class="kanban-item bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm mb-4 cursor-move hover:shadow transition-shadow" data-id="{{ report.id }}">
                            <div class="px-4 pt-4">
                                <span class="inline-block px-3 py-1 bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200 text-sm font-medium rounded-full">
                                    {{ report.reportType|default('Complaint') }}
                                </span>
                            </div>

                            <div class="px-4 pt-2">
                                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">{{ report.title|default('Complaint') }}</h3>
                            </div>
                            
                            <div class="px-4 py-3 text-gray-600 dark:text-gray-300">
                                {{ report.description|striptags|slice(0, 25) }}{{ report.description|length > 25 ? '...' : '' }}
                            </div>
                            
                            <div class="px-4 pb-4 flex justify-between items-center">
                                <div class="text-sm text-gray-500 dark:text-gray-400">
                                    {{ report.creationDate|date('d M Y')|default(' ') }}
                                </div>
                                
                                <div class="flex items-center text-gray-500 dark:text-gray-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                                    </svg>
                                    <span>{{ report.attachments is not empty ? 1 : 0 }}</span>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endfor %}
    </div>
</div>

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Create a notification element
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-blue-500 dark:bg-blue-600 text-white px-4 py-2 rounded shadow-lg z-50 hidden';
            notification.textContent = 'Updating...';
            document.body.appendChild(notification);
            
            // Setup CSRF token for AJAX requests if using Symfony security
            const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            // Initialize jQuery UI sortable
            $('.kanban-items').sortable({
                connectWith: '.kanban-items',
                placeholder: 'border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 mb-4',
                opacity: 0.7,
                cursor: 'move',
                revert: 200,
                
                start: function(event, ui) {
                    ui.item.addClass('scale-105 shadow-md');
                    ui.placeholder.height(ui.item.height());
                },
                
                stop: function(event, ui) {
                    ui.item.removeClass('scale-105 shadow-md');
                },
                
                receive: function(event, ui) {
                    // This triggers when an item is dropped into a new list
                    const reportId = ui.item.data('id');
                    const newStatus = $(this).data('status');
                    
                    // Show notification
                    notification.textContent = 'Updating...';
                    notification.classList.remove('hidden', 'bg-green-500', 'bg-red-500');
                    notification.classList.add('bg-blue-500');
                    notification.classList.remove('hidden');
                    
                    // Highlight the item being updated
                    ui.item.addClass('border-blue-300 dark:border-blue-500');
                    
                    // Create the URL with the report ID
                    let url = '{{ path('app_reports_kanban_update_status', {id: '__ID__'}) }}';
                    url = url.replace('__ID__', reportId);
                    
                    // Send the update to the server
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-TOKEN': token || ''
                        },
                        body: JSON.stringify({ status: newStatus })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Success handling
                        ui.item.removeClass('border-blue-300 dark:border-blue-500');
                        ui.item.addClass('border-green-300 dark:border-green-500');
                        
                        notification.textContent = 'Updated successfully!';
                        notification.classList.remove('bg-blue-500');
                        notification.classList.add('bg-green-500');
                        
                        // Reset styling after delay
                        setTimeout(() => {
                            ui.item.removeClass('border-green-300 dark:border-green-500');
                            ui.item.addClass('border-gray-200 dark:border-gray-600');
                            
                            notification.classList.add('hidden');
                        }, 1500);
                    })
                    .catch(error => {
                        // Error handling
                        console.error('Error updating status:', error);
                        
                        ui.item.removeClass('border-blue-300 dark:border-blue-500');
                        ui.item.addClass('border-red-300 dark:border-red-500');
                        
                        notification.textContent = 'Update failed!';
                        notification.classList.remove('bg-blue-500');
                        notification.classList.add('bg-red-500');
                        
                        // Reset styling after delay
                        setTimeout(() => {
                            ui.item.removeClass('border-red-300 dark:border-red-500');
                            ui.item.addClass('border-gray-200 dark:border-gray-600');
                            
                            notification.classList.add('hidden');
                        }, 1500);
                        
                        $(ui.sender).sortable('cancel');
                    });
                }
            }).disableSelection();
            
            // Add a check to make sure jQuery UI is working
            if (typeof $.ui === 'undefined') {
                console.error('jQuery UI is not loaded properly');
                alert('jQuery UI is not loaded properly. Please check the console.');
            }
        });
    </script>
{% endblock %}
{% endblock %}